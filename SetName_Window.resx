<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJu
        QgASPyYGBAwIDAAAAAYcHBwE2tfaAvDt8ALx7fAC8e3wAvHt8ALx7fAA8e3wAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAst
        FwQNLhoKESMYYDhCPc9MTEzzZWJkx1taW7F4dnijbWttm1BOUKVbWVqlRkVGmSQkJJVFQ0RWOzo7MCsq
        KxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAALIRZOGRYexR0bHcuHfoX71c3T/+fj5v/t6u3/7urt/evn6v3i3uH719PW+dvW2vPOyc31lZKU+4aD
        hfd3dXfvT05P0xgYGIkGBQYuCgkKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAEAAgQEJB8dJ+UwKzn9jYOM/9/V3v/r6Ov/7ens/+7r7v/v7O//8O7v/+/t7//p4uj/3s/b/76s
        u/+xpa//w7rB/9XN1P/i2uH/xb3D/3JqcfVBPECVCxUQGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAEBAg4TERe5eGuU/UU+Sv3Sv8//5Nvi/+3q7f/v7O7/8u7x//Lv8f/y8fL/8fDx/+vl
        6f/Asb3/lI2T/8jDx//Ev8P/tq+1/5WMlP/Kucf/xbDB/7afsf9mWmTXEBYTPhhNLgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABgUHfGRZePmkksr/V05Z/d3I2f/m3uT/7urt//Hu8P/y8PL/9PHz//Tz
        9P/08/T/8Onu/6eepv/v6+7/8+/y/+7q7f/r5+r/3Nbb/5OLkv+7qrj/e214/7Wfsf9kW2PtBgsJNgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkICrPsqDX/6uZ0f9QSFX/3MTY/+nd5//u6e3/8e3w//Lw
        8v/z8fL/9fT1//Xy9P/w6/D/7ebr//Pv8v/v6+7/7ens/+rn6f/l4uT/ysHI/3ZudP+dkZv/mpKZ/5yN
        mf9TS1LHAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4bI+PDsuj/t6Xe/0tDWP/GrsH/49Hg/+rg
        6P/w6u//8+7y//Pw8v/z7vH/4dvh/+Xh5f/07/P/9PDz/+7q7f/u6u3/7ens/+vm6v/m3OT/nZKb/93S
        2//i4OL/npid/5iIlf8XFBbBAQEBEgAAAAAAAAAAAAAAAAAAAAABAQEGFhQb8cOz5v/Fs+v/bF+G/4x8
        jP/exdn/6Nvl/+3j6//y6vD/7ubt/+XV4v/Zytf/hH+D/11aXf/bzdn/59/m/+vl6v/q4+n/6eDo/9HI
        z/9rY2//zcTM/+nm6P+emZ3/sZ+t/11TW/0BAQFMAAAAAAAAAAAAAAAAAAAAAAEBAUQgHSb7s6bO/9XF
        9f+mlMv/U0pg/8OtwP/hzt7/59nk/+rg6f/i1eD/28fY/9bD0v84NTj/PDg7/9bD0v/e0dv/5N3j/+bg
        5f+3sLb/mY6t/6KOy/+ZjqP/4NXe/7irtf/ArLz/lYeS/w0MDZMAAAAAAAAAAAAAAAAAAAAAAAAAZk5H
        XP+XjK3/18jz/8m47f+HeKf/V05c/9C6zP/izt7/5dfi/93O2//cydn/tqaz/4B7gP9lX2T/28fY/93R
        2//i3OH/5N7i/8XCxP+YkqD/loez/4+BoP/Xx9T/1M/T/8vEyf+snqn/FxUXwwAAAAAAAAAAAAAAAAEB
        AQAAAACbgXWX/46Cpf/Txe//z8Hv/72s4f92aZP/XVNf/9G6zf/dyNn/3MrZ/dzM2f28q7n/g3mB/8Wz
        wf/bydj/4Nbe/+Hc4P/k4OL/5+bn/+Ti4//Iv8b/wa6+/7+su/+jnaH/wrvA/5iMlv8ODA3FAAAAAAAA
        AAABAQEAAAAATi8rNe27rNn/n5G7/6qewf/SxPD/yrvr/7ak2f9uYof/cWVz/9S90P/YwtT/2cbW/9vJ
        2PvYxdX/2sfX/93Q2v/e1dz/39ve/+Ph4v/j4eL/29fa/9DDzf/Is8T/ZFtj/z03O/+yoK//UEhO7QEB
        AU4AAAAAAAAAAAEBAU4nJC3zuK3L/+3n+v/OvPD/g3mY/9fJ8//Qwe7/yLnp/7Wk2P9xZIr/bmNw/9G8
        zv/XwdP/18LU/9jF1f3bytn/3dLb/9zT2v/g3N//4uDh/93a3P/SytD/y7nH/8Owv/9MSUz/dW1z/5uL
        mO0MCwx0AQEBBAAAAAABAQE+HBog9bWozP/08fr/9vL9/+bb+v+4p9j/opa6/9fJ9P/Rwu//xbXn/7am
        2v9/cZv/X1Vl/66drP/Vv9H/1cDS/9fD1P/ZyNb/2s3X/9zX2//b19r/1c3T/86/y//Ntcj/xbDB/2Fa
        YP+MgIr9OjU5rQEBAQ4AAAAAAQEBEAYGB8eSh6j/493x//r4/v/8+/7/9fL7/8q66v+mlsX/uq3V/9XG
        8//Mve3/xLXn/7yt3/+VhrX/SEBW/3FmcP++rLz/07/R/dO+0P/Sv87/0sXP/87FzP/OwMv/0LzN/dG6
        zf3Ru879zLnJ+XBobvMODg6rAQEBAgAAAAAAAABCPThE/8K03v/7+v3//Pz+/+/r9v+/sNz/p5TN/7Si
        2v+qm8r/tqjS/86/7f/Juuv/xLXn/7+v4v+omM3/dWeQ/01EWv9sYW3/rJuq/8m1x//Pusv/zLjJ/824
        yv/Su8790bvO9864y/WuoK3nSEpS9wwLDtEBAQEAAAAAAAYGCJWZjq3/0sfp/+7q9v/Uy+j/q5rQ/6aT
        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
        gH///8D////g////4f////H///////////8=
</value>
  </data>
</root>